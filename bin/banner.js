#!/usr/bin/env node

const PAVES = ' ▘▝▀▖▌▞▛▗▚▐▜▄▙▟█';

const FONT_BASE = [
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x18, 0x18, 0x18, 0x18, 0x0, 0x18, 0x0,
    0x0, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x66, 0xff, 0x66, 0x66, 0xff, 0x66, 0x0,
    0x18, 0x7c, 0x6, 0x3c, 0x60, 0x3e, 0x18, 0x0,
    0x0, 0x66, 0x36, 0x18, 0xc, 0x66, 0x62, 0x0,
    0x38, 0x6c, 0x38, 0x1c, 0xf6, 0x66, 0xdc, 0x0,
    0x0, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x70, 0x38, 0x18, 0x18, 0x38, 0x70, 0x0,
    0x0, 0xe, 0x1c, 0x18, 0x18, 0x1c, 0xe, 0x0,
    0x0, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x0, 0x0,
    0x0, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0xc,
    0x0, 0x0, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0,
    0x0, 0x60, 0x30, 0x18, 0xc, 0x6, 0x2, 0x0,
    0x0, 0x3c, 0x66, 0x76, 0x6e, 0x66, 0x3c, 0x0,
    0x0, 0x18, 0x1c, 0x18, 0x18, 0x18, 0x7e, 0x0,
    0x0, 0x3c, 0x66, 0x30, 0x18, 0xc, 0x7e, 0x0,
    0x0, 0x7e, 0x30, 0x18, 0x30, 0x66, 0x3c, 0x0,
    0x0, 0x30, 0x38, 0x3c, 0x36, 0x7e, 0x30, 0x0,
    0x0, 0x7e, 0x6, 0x3e, 0x60, 0x66, 0x3c, 0x0,
    0x0, 0x3c, 0x6, 0x3e, 0x66, 0x66, 0x3c, 0x0,
    0x0, 0x7e, 0x60, 0x30, 0x18, 0xc, 0xc, 0x0,
    0x0, 0x3c, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x0,
    0x0, 0x3c, 0x66, 0x7c, 0x60, 0x30, 0x1c, 0x0,
    0x0, 0x0, 0x18, 0x18, 0x0, 0x18, 0x18, 0x0,
    0x0, 0x0, 0x18, 0x18, 0x0, 0x18, 0x18, 0xc,
    0x60, 0x30, 0x18, 0xc, 0x18, 0x30, 0x60, 0x0,
    0x0, 0x0, 0x7e, 0x0, 0x0, 0x7e, 0x0, 0x0,
    0x6, 0xc, 0x18, 0x30, 0x18, 0xc, 0x6, 0x0,
    0x0, 0x3c, 0x66, 0x30, 0x18, 0x0, 0x18, 0x0,
    0x0, 0x3c, 0x66, 0x76, 0x76, 0x6, 0x7c, 0x0,
    0x0, 0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x0,
    0x0, 0x3e, 0x66, 0x3e, 0x66, 0x66, 0x3e, 0x0,
    0x0, 0x3c, 0x66, 0x6, 0x6, 0x66, 0x3c, 0x0,
    0x0, 0x1e, 0x36, 0x66, 0x66, 0x36, 0x1e, 0x0,
    0x0, 0x7e, 0x6, 0x3e, 0x6, 0x6, 0x7e, 0x0,
    0x0, 0x7e, 0x6, 0x3e, 0x6, 0x6, 0x6, 0x0,
    0x0, 0x7c, 0x6, 0x6, 0x76, 0x66, 0x7c, 0x0,
    0x0, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x0,
    0x0, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x0,
    0x0, 0x70, 0x60, 0x60, 0x60, 0x66, 0x3c, 0x0,
    0x0, 0x66, 0x36, 0x1e, 0x1e, 0x36, 0x66, 0x0,
    0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7e, 0x0,
    0x0, 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0x0,
    0x0, 0x66, 0x6e, 0x7e, 0x7e, 0x76, 0x66, 0x0,
    0x0, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0,
    0x0, 0x3e, 0x66, 0x66, 0x3e, 0x6, 0x6, 0x0,
    0x0, 0x3c, 0x66, 0x66, 0x66, 0x36, 0x6c, 0x0,
    0x0, 0x3e, 0x66, 0x66, 0x3e, 0x36, 0x66, 0x0,
    0x0, 0x3c, 0x6, 0x3c, 0x60, 0x60, 0x3c, 0x0,
    0x0, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0,
    0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x0,
    0x0, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x0,
    0x0, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x0,
    0x0, 0x66, 0x66, 0x3c, 0x3c, 0x66, 0x66, 0x0,
    0x0, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x0,
    0x0, 0x7e, 0x30, 0x18, 0xc, 0x6, 0x7e, 0x0,
    0x0, 0x78, 0x18, 0x18, 0x18, 0x18, 0x78, 0x0,
    0x0, 0x2, 0x6, 0xc, 0x18, 0x30, 0x60, 0x0,
    0x0, 0x1e, 0x18, 0x18, 0x18, 0x18, 0x1e, 0x0,
    0x0, 0x10, 0x38, 0x6c, 0xc6, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0,
    0x0, 0x18, 0x3c, 0x7e, 0x7e, 0x3c, 0x18, 0x0,
    0x0, 0x0, 0x3c, 0x60, 0x7c, 0x66, 0x7c, 0x0,
    0x0, 0x6, 0x6, 0x3e, 0x66, 0x66, 0x3e, 0x0,
    0x0, 0x0, 0x3c, 0x6, 0x6, 0x6, 0x3c, 0x0,
    0x0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x7c, 0x0,
    0x0, 0x0, 0x3c, 0x66, 0x7e, 0x6, 0x3c, 0x0,
    0x0, 0x70, 0x18, 0x7c, 0x18, 0x18, 0x18, 0x0,
    0x0, 0x0, 0x7c, 0x66, 0x66, 0x7c, 0x60, 0x3e,
    0x0, 0x6, 0x6, 0x3e, 0x66, 0x66, 0x66, 0x0,
    0x0, 0x18, 0x0, 0x1c, 0x18, 0x18, 0x3c, 0x0,
    0x0, 0x60, 0x0, 0x60, 0x60, 0x60, 0x60, 0x3c,
    0x0, 0x6, 0x6, 0x36, 0x1e, 0x36, 0x66, 0x0,
    0x0, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x0,
    0x0, 0x0, 0x66, 0xfe, 0xfe, 0xd6, 0xc6, 0x0,
    0x0, 0x0, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x0,
    0x0, 0x0, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x0,
    0x0, 0x0, 0x3e, 0x66, 0x66, 0x3e, 0x6, 0x6,
    0x0, 0x0, 0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60,
    0x0, 0x0, 0x3e, 0x66, 0x6, 0x6, 0x6, 0x0,
    0x0, 0x0, 0x7c, 0x6, 0x3c, 0x60, 0x3e, 0x0,
    0x0, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x70, 0x0,
    0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x0,
    0x0, 0x0, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x0,
    0x0, 0x0, 0xc6, 0xd6, 0xfe, 0x7c, 0x6c, 0x0,
    0x0, 0x0, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x0,
    0x0, 0x0, 0x66, 0x66, 0x66, 0x7c, 0x30, 0x1e,
    0x0, 0x0, 0x7e, 0x30, 0x18, 0xc, 0x7e, 0x0,
    0x0, 0x18, 0x3c, 0x7e, 0x7e, 0x18, 0x3c, 0x0,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x0, 0x7e, 0x1e, 0x3e, 0x76, 0x66, 0x60, 0x0,
    0x10, 0x18, 0x1c, 0x1e, 0x1c, 0x18, 0x10, 0x0,
    0x8, 0x18, 0x38, 0x78, 0x38, 0x18, 0x8, 0x0
];

const DIACRITICS = [
    0x08, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 300
    0x10, 0x08, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x10, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x24, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 308
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 30A
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 30F
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 310
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 319
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 31F
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 320
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, // 327
    0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // 328
];

class BlockBanner {

    static getFontCharIndex(s) {
        let c = s.charCodeAt(0);
        let cx = 0;
        if (c < 32) {
            c = 32;
        }
        if (c >= 128) {
            const sx = s.normalize('NFD');
            c = sx.charCodeAt(0);
            cx = sx.charAt(0) > 'Z' ? sx.charCodeAt(1) : 0;
        }
        const bDia = cx > 0;
        const nIndex = (c - 32) * 8;
        const nDiaIndex = bDia ? (cx - 0x300) * 8 : 0;
        const aDia = bDia
            ? DIACRITICS.slice(nDiaIndex, nDiaIndex + 8)
            : FONT_BASE.slice(0, 8);
        return FONT_BASE
            .slice(nIndex, nIndex + 8)
            .map((x, i) => (bDia && ((i < 2 || i >= 7) || i > 7)) ? aDia[i] : x);
    }

    static convertStringToBytes(s) {
        const aOutput = [[], [], [], []];
        s.split('').forEach(c => {
            const aData = BlockBanner.getFontCharIndex(c);
            aOutput[0].push([aData[0], aData[1]]);
            aOutput[1].push([aData[2], aData[3]]);
            aOutput[2].push([aData[4], aData[5]]);
            aOutput[3].push([aData[6], aData[7]]);
        });
        return aOutput;
    }

    static getSquareNibbleChar(n) {
        return PAVES.charAt(n & 0xF);
    }

    static getTwoByteString(b1, b2) {
        let sResult = '';
        for (let i = 0; i < 4; ++i) {
            const n = (b1 & 0x3) | ((b2 & 0x3) << 2);
            sResult += BlockBanner.getSquareNibbleChar(n);
            b1 >>= 2;
            b2 >>= 2;
        }
        return sResult;
    }

    static convertMaskIntoByte(sMask) {
        return sMask
            .split('')  //
            .reverse()  //
            .map(c => c === ' ' ? 0 : 1)
            .reduce((prev, b) => (prev << 1) | b, 0);
    }

    static convertImageIntoBytes(aImage) {
        const extract = (row, x) => !!row ? BlockBanner.convertMaskIntoByte(row.substr(x, 8).padEnd(8, ' ')) : 0;
        const aBytes = [];
        for (let y = 0, height = aImage.length; y < height; y += 2) {
            const row1 = aImage[y];
            const row2 = aImage[y + 1];
            const aByteRow = [];
            for (let x = 0, width = row1.length; x < width; x += 8) {
                aByteRow.push([
                    extract(row1, x),
                    extract(row2, x)
                ]);
            }
            aBytes.push(aByteRow);
        }
        return aBytes;
    }

    static buildPaveString(aData) {
        return aData.map(row => row.map(cell4 => BlockBanner.getTwoByteString(cell4[0], cell4[1])).join('')).join('\n');
    }

    static renderString(s) {
        return BlockBanner.buildPaveString(BlockBanner.convertStringToBytes(s));
    }
}

const a = process.argv.slice(2);

if (a.length > 0) {
    let bComments = false;
    if (a[0] === '//') {
        bComments = true;
        a.shift();
    }
    const sInput = a.join(' ');
    const sOutput = bComments
        ? BlockBanner
            .renderString(sInput)
            .split('\n')
            .map(s => '// ' + s)
            .join('\n')
        : BlockBanner
            .renderString(sInput);
    console.log(sOutput);
}
